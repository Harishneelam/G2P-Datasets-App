br(),
br(),
fluidRow(
column(12,
radioButtons("dataType", "Please choose the best option that data belongs to:",
choices = list("Research Article" = "type1", "Package or Database" = "type2"),
inline = TRUE)
)
),
conditionalPanel(condition = "input.dataType == 'type1'",
fluidRow(
column(8,
div(class = "input-group",
div(class = "input-row",
textInput("addDOI", HTML("<strong>Data DOI</strong><span style='color:red;'>*</span>"), width = "80%",value = "https://doi.org/10.5061/dryad.qnk98sfbv"),
actionButton("validateDOI", "Validate DOI", width = "20%")),
tags$span("Please include the DOI where the data can be found, Example: https://doi.org/", class = "grey-text"),
tags$span("Note: If the data is part of an article and included within it, or if the external source hosting the data lacks a DOI, include the article's DOI.", class = "grey-text")
))),
fluidRow(column(8,uiOutput("result1"))),
fluidRow(
column(8,
div(class = "input-group",
div(class = "input-row",
textInput("addLink", HTML("<strong>Data sharing link</strong><span style='color:red;'>*</span>"),width = "80%",value = ""),
actionButton("validateLink", "Validate Link",width = "20%")
)))),
fluidRow(column(8,htmlOutput("result2"))),
fluidRow(
column(8,
div(class = "input-group",
div(class = "input-row",
textInput("addTitle", HTML("<strong>Publication Title</strong><span style='color:red;'>*</span>"),width = "80%",value = "Divergent northern and southern populations and demographic history of the pearl oyster in the western Pacific revealed with genomic SNPs"),
actionButton("findArticle", "Find Article",width = "20%")),
tags$span("Note: Enter the title of the article as published.", class = "grey-text")
))),
fluidRow(column(8,uiOutput("result3"))),
# should we allow users to confirm the publication link and if it is incorrect, provide a field to input the link.
# fluidRow(column(8,
#                 tags$span("Please confirm if the article found is correct.", class = "grey-text"),
#                 actionButton("confirmArticle", "Confirm"),
#                 actionButton("enterArticle", "Other")
#                 )),
fluidRow(
column(8, textAreaInput("addLoaderCode", "Code to load data (Recommended)", height = "110px", width = "100%",
value = "# Import necessary packages
# Get geno
geno <- "),
checkboxInput("hasPheno", "Data includes Phenotypic information", value = FALSE)),
fluidRow(column(3,
numericInput("nSamples",  HTML("<strong>Number of samples</strong><span style='color:red;'>*</span>"), value = 0, min = 0, step = 1),
numericInput("nMarkers",  HTML("<strong>Number of markers(SNPs)</strong><span style='color:red;'>*</span>"), value = 0, min = 0, step = 1))),
tags$div(tags$span("Note: Please refer to the examples of existing datasets to write the code for loading data.", class = "grey-text"),style = "margin-left: 15px;")
),
br(),
fluidRow(column(8,actionButton("createData", "Submit"))),
fluidRow(column(8,uiOutput("result4"))),
fluidRow(column(8,tableOutput("result41"))),
br(),
fluidRow(column(3, downloadButton("downloadDataset", "Download dataset folder")))
)
)
server = function(input, output, session){
Meta_Data <- readxl::read_xlsx('/Users/harishneelam/Desktop/Quantgen/GPDatasets/Meta_data.xlsx')
Bresult1 <- reactiveVal(NULL)
observeEvent(input$validateDOI, {
# Checks if the doi is null, already exists in the data and whether it is a valid url.
result1 <- check_url(input$addDOI,Meta_Data)
Bresult1(result1)
output$result1 <- renderText({
HTML(paste(result1[[1]]))
})
if(result1[[2]][1]==TRUE){
updateTextInput(session, "addLink", value = result1[[3]][1])
}
})
Bresult2 <- reactiveVal(NULL)
observeEvent(input$validateLink, {
result2 <- check_link(input$addLink)
Bresult2(result2)
output$result2 <- renderText({
HTML(result2[[1]][1])
})
})
Bresult3 <- reactiveVal(NULL)
observeEvent(input$findArticle, {
result3 <- check_Title(input$addTitle,input$addDOI,check_url(input$addDOI,Meta_Data)[[2]][1])
Bresult3(result3)
output$result3 <- renderUI({
HTML(paste(result3[[1]]))
})
})
Bresult4 <- reactiveVal(NULL)
status <- reactiveVal(FALSE)
observeEvent(input$createData, {
SBresult1 <- Bresult1()
SBresult2 <- Bresult2()
SBresult3 <- Bresult3()
tryCatch({
if (as.logical(SBresult1[2]) && as.logical(SBresult2[2]) && as.logical(SBresult3[2])) {
status(TRUE)
output$result4 <- renderUI({
tags$div(style = "color: green;", paste("Data processed! Please verify the details below."))
})
} else {
output$result4 <- renderUI({
tags$div(style = "color: red;", paste("Error! Please ensure the required fields are validated."))
})
status(FALSE)
}
}, error = function(e) {
output$result4 <- renderUI({
tags$div(style = "color: red;", paste("Error! Please ensure the required fields are validated."))
})
status(FALSE)
})
observe({
if (status()) {
result41 <- create_meta_data(input$addDOI,SBresult3[3],input$addTitle,SBresult3[4],
input$addLink,input$hasPheno,input$nSamples,input$nMarkers,
input$addLoaderCode)
table_matrix <- cbind(result41[[1]], result41[[2]])
# Render the matrix in the UI using reactable
output$table <- renderReactable({
reactable(table_matrix, columns = list(
V1 = colDef(name = "Input"),
V2 = colDef(name = "Output")
))
})
}})
})
output$downloadDataset <- downloadHandler(
filename = function() {
paste0(input$addDatasetName, ".zip")
},
content = function(file) {browser()
tempdir <- tempdir()
dir.create(file.path(tempdir, input$addDatasetName))
setwd(tempdir())
generatedMetadata <- list(
"DOI" = input$addDOI,
"DataLink" = input$addDataLink,
"PublicationLink" = input$addPublicationLink,
"Title" = input$addTitle,
"SpeciesCommonName" = input$addSpeciesCommonName,
"SpeciesScientificName" = input$addSpeciesScientificName,
"Abstract" = input$addAbstract,
"nGenotypes" = input$addnGenotypes,
"nMarkers" = input$addnMarkers,
"Phenotype" = "phenotype" %in% input$addCheckboxes,
"Map" = "map" %in% input$addCheckboxes,
"Pedigree" = "pedigree" %in% input$addCheckboxes,
"Tags" = input$addTags
)
writeLines(toJSON(generatedMetadata), file.path(input$addDatasetName, "metadata.json"))
writeLines(input$addLoaderCode, file.path(input$addDatasetName, "loader.R"))
zip(file, file.path(input$addDatasetName))
},
contentType = "application/zip"
)
}
shinyApp(ui = ui, server = server)
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
library(reactable)
install.packages("reactable")
library(reactable)
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
help("renderDT")
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
Meta_Data
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
library(shiny); runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
runApp('Desktop/Quantgen/Codes/ShinyTest.R')
setwd('/Users/harishneelam/Desktop/Quantgen/GPDatasets/Datasets')
library(shiny)
library(jsonlite)
library(stringr)
source('/Users/harishneelam/Desktop/Quantgen/Codes/RSFunctions.R')
ui = fluidPage(
h1("Add dataset"),
"The GPDatasets repository is designed so that users can add their own public datasets. To add a dataset, first fill in the fields below, download (and check) the generated dataset folder, then push the dataset folder to https://github.com/QuantGen/GPDatasets/tree/main/Datasets",
br(),
HTML("<strong>Important note</strong><span style='color:red;'>*</span>: The data should atleast contain genotypic data(SNPs) for a species."),
tags$head(
tags$style(HTML("
.input-group {
display: flex;
flex-direction: column;
}
.input-group .input-row {
display: flex;
align-items: center;
}
.input-group .form-control {
flex: 2;
}
.input-group .btn {
margin-left: 10px;
margin-top: 10px;
}
.grey-text {
color: grey;
font-size: 0.9em;
margin-top: 0px;
}
"))
),
br(),
br(),
fluidRow(
column(12,
radioButtons("dataType", "Please choose the best option that data belongs to:",
choices = list("Research Article" = "type1", "Package or Database" = "type2"),
inline = TRUE)
)
),
conditionalPanel(condition = "input.dataType == 'type1'",
fluidRow(
column(8,
div(class = "input-group",
div(class = "input-row",
textInput("addDOI", HTML("<strong>Data DOI</strong><span style='color:red;'>*</span>"), width = "80%",value = "https://doi.org/10.5061/dryad.qnk98sfbv"),
actionButton("validateDOI", "Validate DOI", width = "20%")),
tags$span("Please include the DOI where the data can be found, Example: https://doi.org/", class = "grey-text"),
tags$span("Note: If the data is part of an article and included within it, or if the external source hosting the data lacks a DOI, include the article's DOI.", class = "grey-text")
))),
fluidRow(column(8,uiOutput("result1"))),
fluidRow(
column(8,
div(class = "input-group",
div(class = "input-row",
textInput("addLink", HTML("<strong>Data sharing link</strong><span style='color:red;'>*</span>"),width = "80%",value = ""),
actionButton("validateLink", "Validate Link",width = "20%")
)))),
fluidRow(column(8,htmlOutput("result2"))),
fluidRow(
column(8,
div(class = "input-group",
div(class = "input-row",
textInput("addTitle", HTML("<strong>Publication Title</strong><span style='color:red;'>*</span>"),width = "80%",value = "Divergent northern and southern populations and demographic history of the pearl oyster in the western Pacific revealed with genomic SNPs"),
actionButton("findArticle", "Find Article",width = "20%")),
tags$span("Note: Enter the title of the article as published.", class = "grey-text")
))),
fluidRow(column(8,uiOutput("result3"))),
# should we allow users to confirm the publication link and if it is incorrect, provide a field to input the link.
# fluidRow(column(8,
#                 tags$span("Please confirm if the article found is correct.", class = "grey-text"),
#                 actionButton("confirmArticle", "Confirm"),
#                 actionButton("enterArticle", "Other")
#                 )),
fluidRow(
column(5, textAreaInput("addLoaderCode", "Code to load data (Recommended)", height = "110px", width = "100%",
value = "# Import necessary packages
# Get geno
geno <- "),
checkboxInput("hasPheno", "Data includes Phenotypic information", value = FALSE)),
fluidRow(column(3,
numericInput("nSamples",  HTML("<strong>Number of samples</strong><span style='color:red;'>*</span>"), value = 0, min = 0, step = 1),
numericInput("nMarkers",  HTML("<strong>Number of markers(SNPs)</strong><span style='color:red;'>*</span>"), value = 0, min = 0, step = 1))),
tags$div(tags$span("Note: Please refer to the examples of existing datasets to write the code for loading data.", class = "grey-text"),style = "margin-left: 15px;")
),
br(),
fluidRow(column(3,actionButton("createData", "Submit"))),
fluidRow(column(8,uiOutput("result4"))),
br(),
fluidRow(column(8,DTOutput("metaData"))),
br(),
fluidRow(column(8,uiOutput("modifyButton"))),
br(),
fluidRow(column(8,uiOutput("result5"))),
br(),
fluidRow(column(3, downloadButton("downloadDataset", "Download dataset folder"))),
br()
)
)
server = function(input, output, session){
Meta_Data <- readxl::read_xlsx('/Users/harishneelam/Desktop/Quantgen/GPDatasets/Meta_data.xlsx')
# Truncate text
truncate_text <- function(text, max_length) {
if (nchar(text) > max_length) {
return(paste0(substr(text, 1, max_length), "..."))
} else {
return(text)
}
}
Bresult1 <- reactiveVal(NULL)
observeEvent(input$validateDOI, {
# Checks if the doi is null, already exists in the data and whether it is a valid url.
result1 <- check_url(input$addDOI,Meta_Data)
Bresult1(result1)
output$result1 <- renderText({
HTML(paste(result1[[1]]))
})
if(result1[[2]][1]==TRUE){
updateTextInput(session, "addLink", value = result1[[3]][1])
}
})
Bresult2 <- reactiveVal(NULL)
observeEvent(input$validateLink, {
result2 <- check_link(input$addLink)
Bresult2(result2)
output$result2 <- renderText({
HTML(result2[[1]][1])
})
})
Bresult3 <- reactiveVal(NULL)
observeEvent(input$findArticle, {
result3 <- check_Title(input$addTitle,input$addDOI,check_url(input$addDOI,Meta_Data)[[2]][1])
Bresult3(result3)
output$result3 <- renderUI({
HTML(paste(result3[[1]]))
})
})
# Create meta data
Bresult4 <- reactiveVal(NULL)
status <- reactiveVal(FALSE)
observeEvent(input$createData, {
SBresult1 <- Bresult1()
SBresult2 <- Bresult2()
SBresult3 <- Bresult3()
tryCatch({
if (as.logical(SBresult1[2]) && as.logical(SBresult2[2]) && as.logical(SBresult3[2])) {
status(TRUE)
output$result4 <- renderUI({
tags$div(
tags$div(style = "color: green;", "Data processed!"),
tags$div(style = "color: black;", "Please verify the details below and modify them as needed by double clicking the fields.")
)
})
} else {
output$result4 <- renderUI({
tags$div(style = "color: red;", paste("Error! Please ensure the required fields are validated."))
})
status(FALSE)
}
}, error = function(e) {
output$result4 <- renderUI({
tags$div(style = "color: red;", paste("Error! Please ensure the required fields are validated."))
})
status(FALSE)
})
observe({
if (status()) {
result41 <- create_meta_data(input$addDOI,SBresult3[3],input$addTitle,SBresult3[4],
input$addLink,input$hasPheno,input$nSamples,input$nMarkers,
input$addLoaderCode)
metaData <- cbind(result41[[1]], result41[[2]])
metaData[4,2] <- truncate_text(metaData[4,2],200)
colnames(metaData) <- c("Input","Value")
folder_name <- generate_folder_name(result41[[2]][3],result41[[2]][6],Meta_Data)
meta_data_new <- c(folder_name,result41[[2]])
names(meta_data_new) <- colnames(Meta_Data)
Bresult4(meta_data_new)
rv <- reactiveVal(metaData)
originalData <- reactiveVal(metaData)
output$metaData <- renderDT({
datatable(metaData, options = list(
pageLength = 15,
searching = FALSE,
lengthChange = FALSE,
paging = FALSE,
info = FALSE
), editable = TRUE,selection = "none")
})
observeEvent(input$metaData_cell_edit, {
new_data <- rv()
edited_value <- input$metaData_cell_edit$value
row_index <- input$metaData_cell_edit$row + 1
col_index <- input$metaData_cell_edit$col
new_data[row_index, col_index] <- edited_value
rv(new_data)
})
output$modifyButton <- renderUI({
if (identical(rv(), originalData())) {
actionButton("modifyData", "Submit")
} else {
actionButton("modifyData", "Submit Changes")
}
})
observeEvent(input$modifyData, {
showModal(modalDialog(
title = "Thank you!",
"The data has been submitted.",
easyClose = TRUE,
footer = NULL
))
})
}})
})
observeEvent(input$modifyData, {
output$result5 <- renderUI({
tags$div(style = "color: green;", paste("Data Submitted!!"))
})
})
# Generate Data Folder
output$downloadDataset <- downloadHandler(
filename <- function() {
new_meta_data <- Bresult4()
paste0(new_meta_data[1], ".zip")
},
content <- function(file) {
new_meta_data <- Bresult4()
temp_dir <- tempdir()
temp_folder_name <- new_meta_data[[1]]
dir.create(file.path(temp_dir,temp_folder_name ))
setwd(temp_dir)
on.exit(unlink(temp_dir, recursive = TRUE))
# Generate read_data_code.R
writeLines(input$addLoaderCode, file.path(temp_folder_name, "read_data_code.R"))
# Generate output folder
output_dir <- file.path(new_meta_data[[1]]$dir, "output")
dir.create("output")
setwd(output_folder)
# json generator
writeLines(jsonlite::toJSON(new_meta_data, pretty = TRUE, auto_unbox = TRUE), "meta_data.json")
# .md file generator
md_content <- paste0(
"# ", new_meta_data[4], "\n\n",
"This publication discusses: ", new_meta_data[5], "\n\n",
"It contains ",new_meta_data[13], " genotypes and ", new_meta_data[14], " markers.\n\n",
"Title: ", new_meta_data[4], "\n\n",
"Scientific name: ", new_meta_data[6], "\n\n",
"Common name: ", new_meta_data[7],"\n\n",
"DOI: ", new_meta_data[2], "\n\n"
)
file_name <- "meta_data.md"
write(md_content, file = file_name)
# .bib file generator
url <- as.character(new_meta_data[2])
try({
file_name <- "citation.bib"
curl_download(url, destfile = file_name, handle = handle_setheaders(new_handle(), accept = "application/x-bibtex")
)
})
files_to_zip <- list.files(as.character(new_meta_data[1]), full.names = TRUE)
files <- zip(file, files = files_to_zip)
},
contentType = "application/zip"
)
}
shinyApp(ui = ui, server = server)
